openapi: 3.0.3
info:
  version: 'latest'
  title: Green Route API
  description: This API provides access to the Green Route service.
servers:
  - url: 'http://localhost:8080'

paths:
  /ping:
    get:
      tags:
        - Health
      summary: Health check
      operationId: ping
      security: [ ]
      description: Check server health
      responses:
        200:
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong
        500:
          $ref: '#/components/responses/500'

  /signin:
    post:
      tags:
        - Security
      summary: Login user.
      operationId: signIn
      security: [ ]
      responses:
        "201":
          description: Logged in payload.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  /signup:
    post:
      tags:
        - Security
      summary: Sign up user
      operationId: signUp
      security: [ ]
      requestBody:
        description: Sign up payload.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Signed up user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  /users/{id}:
    get:
      tags:
        - User
      summary: Get user by identifier
      operationId: getUserById
      security: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Authenticated User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  /activities:
    get:
      tags:
        - User
      summary: Get user activities history
      operationId: getActivities
      security: [ ]
      responses:
        200:
          description: List of itineraries prompted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Itinerary"
        '500':
          $ref: '#/components/responses/500'

  /itineraries:
    post:
      tags:
        - Route
      summary: Eco-friendly itineraries according to travel description
      operationId: generateItineraries
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TravelDescription"
      responses:
        200:
          description: Eco friendly route with description with carbone analysis
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Itinerary"
        '500':
          $ref: '#/components/responses/500'

  /weathers:
    post:
      tags:
        - Route
      summary: Get next 3 days forecast
      operationId: getForecast
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                origin:
                  type: string
                  example: Paris
                destination:
                  type: string
                  example: Marseille
      responses:
        200:
          description: Eco friendly route with description with carbone analysis
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Weather"
        '500':
          $ref: '#/components/responses/500'


components:
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    429:
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        last_name:
          type: string
        authentication_id:
          type: string
        first_name:
          type: string
        username:
          type: string
        birth_date:
          type: string
          format: date-time
        email:
          type: string
        photo_id:
          type: string

    AuthenticationPayload:
      type: object
      properties:
        email:
          type: string
        provider_id:
          type: string

    Itinerary:
      type: object
      properties:
        transport:
          type: object
          properties:
            co2e:
              type: number
              description: Carbone footprint
            co2e_pp:
              type: number
              description: Carbone footprint per person
        accommodation:
          type: object
          properties:
            co2e:
              type: number
              description: Carbone footprint
            co2e_pp:
              type: number
              description: Carbone footprint per person
        travel_description:
          type: string

    Weather:
      type: object
      properties:
        origin:
          $ref: "#/components/schemas/Forecast"
        destination:
          $ref: "#/components/schemas/Forecast"
    Forecast:
      type: object
      properties:
        location:
          type: object
          properties:
            name:
              type: string
            region:
              type: string
            country:
              type: string
        forecast:
          type: array
          items:
            $ref: "#/components/schemas/ForecastDay"

    ForecastDay:
      type: object
      properties:
        date:
          type: string
          format: date-time
        day:
          type: object
          properties:
            max_temp:
              type: integer
              description: Temperature in Celsius multiply by 100
            min_temp:
              type: integer
              description: Temperature in Celsius multiply by 100
            condition:
              type: object
              properties:
                text:
                  type: string
                  example: Patchy rain nearby
                icon:
                  type: string
                  description: icon link



    TravelDescription:
      type: object
      properties:
        from:
          type: string
          example: Wall Street 96, New York City
        to:
          type: string
          example: White House, Washington DC
        distance:
          type: integer
        people:
          type: integer
          description: How many persons are going to travel?
        accommodation_type:
          type: string
          enum:
            - HOTEL
            - HOSTEL
            - TENT
            - APARTMENT
            - ROOM
            - RENTED_APARTMENT
        nights:
          type: integer
          description: 'Number of nights, defaults to 1.'
        vehicle:
          $ref: "#/components/schemas/Vehicle"
    Vehicle:
      type: object
      properties:
        type:
          type: string
          enum:
            - BICYCLE
            - SMALL_CAR
            - LARGE_CAR
            - BUS
            - MINIVAN
            - MOTOR_HOME
            - FLIGHT_REGULAR_ECONOMY
            - FLIGHT_CHARTER_ECONOMY
            - HIKING
            - KAYAK
            - TRAM
            - SUBWAY
            - FERRY
            - TRAIN
            - WALKING
        fuel:
          $ref: "#/components/schemas/Fuel"
    Fuel:
      type: object
      properties:
        type:
          type: string
          enum:
            - BIO_DIESEL
            - DIESEL
            - ETHANOL
            - GASOLINE
            - ELECTRICITY
            - NATURAL_GAS
            - BIO_BAS
            - FOSSIL_GAS

    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'